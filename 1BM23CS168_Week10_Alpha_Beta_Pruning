# Alpha-Beta Pruning in Python

# Minimax function with Alpha-Beta Pruning
def alpha_beta(depth, node_index, maximizing_player, values, alpha, beta, max_depth):
    # Base case: when we reach the maximum depth (leaf node)
    if depth == max_depth:
        return values[node_index]

    if maximizing_player:
        best = float('-inf')

        # Traverse left and right children
        for i in range(2):
            val = alpha_beta(depth + 1, node_index * 2 + i, False, values, alpha, beta, max_depth)
            best = max(best, val)
            alpha = max(alpha, best)

            # Alpha-Beta Pruning condition
            if beta <= alpha:
                break
        return best

    else:
        best = float('inf')

        # Traverse left and right children
        for i in range(2):
            val = alpha_beta(depth + 1, node_index * 2 + i, True, values, alpha, beta, max_depth)
            best = min(best, val)
            beta = min(beta, best)

            # Alpha-Beta Pruning condition
            if beta <= alpha:
                break
        return best


# Example usage:
if __name__ == "__main__":
    # Example game tree (values at leaf nodes)
    values = [3, 5, 6, 9, 1, 2, 0, -1]
    max_depth = 3  # since 2^3 = 8 leaf nodes

    print("Leaf node values:", values)
    optimal_value = alpha_beta(0, 0, True, values, float('-inf'), float('inf'), max_depth)
    print("\nThe optimal value (best achievable score) is:", optimal_value)
