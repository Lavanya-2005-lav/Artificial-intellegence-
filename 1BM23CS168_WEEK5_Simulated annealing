import random
import math

def generate_board(N):
    """Generate a random board: board[i] = row of queen in column i"""
    return [random.randint(0, N-1) for _ in range(N)]

def compute_heuristic(board):
    """Compute number of pairs of queens attacking each other"""
    h = 0
    N = len(board)
    for i in range(N):
        for j in range(i+1, N):
            if board[i] == board[j]:                # same row
                h += 1
            elif abs(board[i] - board[j]) == j - i:  # same diagonal
                h += 1
    return h

def get_random_neighbor(board):
    """Generate a neighbor by moving one queen in its column to a random row"""
    N = len(board)
    col = random.randint(0, N-1)
    row = random.randint(0, N-1)
    while board[col] == row:
        row = random.randint(0, N-1)
    new_board = list(board)
    new_board[col] = row
    return new_board

def simulated_annealing(N, max_steps=100000, initial_temp=1000, cooling_rate=0.99):
    board = generate_board(N)
    current_h = compute_heuristic(board)
    T = initial_temp

    for step in range(max_steps):
        if current_h == 0:
            print(f"Solution found in {step} steps!")
            return board
        neighbor = get_random_neighbor(board)
        neighbor_h = compute_heuristic(neighbor)
        delta_h = neighbor_h - current_h

        if delta_h < 0:
            # Better neighbor, move to it
            board = neighbor
            current_h = neighbor_h
        else:
            # Worse neighbor, move with probability e^(-Î”H/T)
            probability = math.exp(-delta_h / T)
            if random.random() < probability:
                board = neighbor
                current_h = neighbor_h

        # Cool down the temperature
        T *= cooling_rate

    print("No solution found")
    return None

# Example usage
N = 8
solution = simulated_annealing(N)
if solution:
    print("Board (column: row):", solution)
